<?phpclass Cms_Model_Mapper_Item_Parameter{    protected $_dbTable;    public function setDbTable($dbTable)    {        if (is_string($dbTable))         {            $dbTable = new $dbTable();        }        if (!$dbTable instanceof Zend_Db_Table_Abstract)         {            throw new Exception('Invalid table data gateway provided');        }        $this->_dbTable = $dbTable;		        return $this;    }    public function getDbTable()    {        if (null === $this->_dbTable)         {            $this->setDbTable('Cms_Model_DbTable_Item_Parameters');        }        return $this->_dbTable;    }	public function save(Cms_Model_Item_Parameter_Abstract $parameter)	{		$dbTable = $this->getDbTable();		$optionsTable = new Cms_Model_DbTable_Item_Parameters_Options();		$dbAdapter = $dbTable->getAdapter();				$data = array(			'type'			=> $parameter->getType(),			'name'			=> $parameter->getName(),            'description'	=> $parameter->getDescription(),		);		if(null === ($id = $parameter->getId())) 		{			$id = $dbTable->insert( $data );			$parameter->setId( $id );			$optionsOldRows = array();        } else {			$dbTable->update( $data, $dbAdapter->quoteInto('id = ?', $id) );			$optionsOldRows = $optionsTable->fetchAll( $dbAdapter->quoteInto('idParameter = ?', $id) )->toArray();		}		// usuwam opcje		$optionsToDelete = array_udiff( $optionsOldRows, $parameter->getOptionsValues(), 'diff_options' );		foreach( $optionsToDelete as $option ) 		{			$optionsTable->delete( $dbAdapter->quoteInto('id = ?', $option['id']) );		}		// aktualizuje opcje		$optionsNew = array();		foreach( $parameter->getOptionsValues() as $option )		{			if( empty($option['id']) )			{				// nowa opcja				$option['idParameter'] = $id;				$optionsRow = $optionsTable->fetchNew();				$optionsRow->value = $option['value'];				$optionsRow->idParameter = $option['idParameter'];				$option['id'] = $optionsRow->save();							}			else			{				// aktualizacja opcji				$optionsTable->update( $option, $dbAdapter->quoteInto('id = ?', $option['id']) );			}			$optionsNew[] = $option;		}		$parameter->setOptionsValues( $optionsNew );		return $this;	}    public function find($id, &$parameter)    {        $result = $this->getDbTable()->find($id);        if (0 == count($result))         {        	return false;        }        $row = $result->current();        $options = $row->findDependentRowset('Cms_Model_DbTable_Item_Parameters_Options');        $className = 'Cms_Model_Item_Parameter_'.$row->type;        $parameter = new $className();        $parameter->setId( $row->id )        	->setType( $row->type )        	->setName( $row->name )			->setDescription( $row->description )			->setOptionsValues( $options->toArray() );		return true;    }    public function fetchAll()    {        $resultSet = $this->getDbTable()->fetchAll();        $entries   = array();        foreach ($resultSet as $row)         {            $clssName = 'Cms_Model_Item_Parameter_' . $row->type;        	$entry = new $className();            $entry->setId( $row->id )            	->setType( $row->type )	        	->setName( $row->name )				->setDescription( $row->description );            $entries[] = $entry;        }        return $entries;    }        public function delete( Cms_Model_Item_Parameter_Abstract $parameter )    {		$dbTable = $this->getDbTable();		// option values		$optionsTable = new Cms_Model_DbTable_Item_Parameters_Options();		$where = $dbTable->getAdapter()->quoteInto('idParameter = ?', $parameter->getId());		$optionsTable->delete( $where );				// parameter    	$where = $dbTable->getAdapter()->quoteInto('id = ?', $parameter->getId());    	return (bool)$dbTable->delete( $where );    }}/** * array_udiff helper */ function diff_options($a, $b){	if ($a['id'] === $b['id']) {        return 0;    }    return ($a['id'] > $b['id'])? 1:-1;};